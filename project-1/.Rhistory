fatmen = read.csv("bodyfatmen.csv")
setwd("~/freddan/regression-analysis/project-1")
fatmen = read.csv("bodyfatmen.csv")
View(fatmen)
View(fatmen)
fatmen = SI(fatmen)
SI <- function(men){
# Function to convert the non-SI units to SI
men$weight <- c(1/2.2*men$weight)
men$height <- c(2.54*men$height)
return(men)
}
fatmen = SI(fatmen)
set.seed(1)
train = sample ( c ( TRUE , FALSE ) , nrow ( fatmen ) , rep = TRUE )
test = (!train)
men_train = fatmen[train,]
men_test = fatmen[test,]
regfit.best = regsubsets(density~., data = men_train, nvmax = 13)
library(leaps)
regfit.best = regsubsets(density~., data = men_train, nvmax = 13)
summary(regfit.best)
summary(regfit.best)
regfit.best = regsubsets(density~., data = men_train, nvmax = 13, method = c("backward"))
summary(regfit.best)
regfit.best = regsubsets(density~., data = men_train, nvmax = 13, method = c("forward"))
summary(regfit.best)
rm("regfit.best")
install.packages("oslr")
install.packages("oslrr")
install.packages("olsrr")
library(olsrr)
?  ols_step_best_subset
install.packages("caret")
library(caret)
train.control <- trainControl(method = "repeatedcv", number = 5, repeats = 20)
step.model <- train(density~., data = men_train,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:nvmax),
trControl = train.control
)
library(caret)
step.model <- train(density~., data = men_train,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:nvmax),
trControl = train.control
)
? train
step.model <- train(density~., data = men_train,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:6),
trControl = train.control
)
step.model <- train(density~., data = men_train,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 1:6),
trControl = train.control
)
step.model <- train(density~. - density, data = men_train,
method = "leapSeq",
trControl = train.control
)
View(step.model)
plot(step.model$results$RMSE, pch = 19, type = "b", ylab="RMSE")
step.model <- train(density~. - density, data = men_train,
method = "lm",
trControl = train.control
)
plot(step.model$results$RMSE, pch = 19, type = "b", ylab="RMSE")
step.model <- train(density~. - density, data = men_train,
method = "lm",
trControl = train.control
)
print(step.model)
step.model$finalModel
step.model <- train(density~. - density, data = men_train,
method = "leapForward",
trControl = train.control
)
step.model$finalModel
print(step.model)
step.model <- train(density~. - density, data = men_train,
method = "backward",
trControl = train.control
)
step.model <- train(density~. - density, data = men_train,
method = "leapBackward",
trControl = train.control
)
print(step.model)
step.model$finalModel
step.model <- train(density~. - density, data = men_train,
tuneGrid = data.frame(nvmax = 1:nvmax),
method = "leapBackward",
trControl = train.control
)
step.model <- train(density~. - density, data = men_train,
tuneGrid = data.frame(nvmax = 1:6),
method = "leapBackward",
trControl = train.control
)
print(step.model)
step.model$finalModel
step.model$results
coef(step.model$finalModel, id=2)
coef(step.model$finalModel, id=3)
View(step.model)
step.model <- train(density~. - density, data = men_train,
tuneGrid = data.frame(nvmax = 1:6),
method = "leapSeq",
trControl = train.control
)
print(step.model)
coef(step.model$finalModel, id=2)
dummy_model = lm(density ~ abdomen + height, data = men_train)
summary(dummy_model)
plot(dummy_model)
best_model = ols_step_best_subset(model)
model = lm(density ~ .-density, data = men_train)
best_model = ols_step_best_subset(model)
View(best_model)
step.model$results
library(leaps)
library(caret)
SI <- function(men){
# Function to convert the non-SI units to SI
men$weight <- c(1/2.2*men$weight)
men$height <- c(2.54*men$height)
return(men)
}
# Import data
fatmen = read.csv("bodyfatmen.csv")
# Converting non-SI units to SI units
fatmen = SI(fatmen)
# Splitting data in two datasets
## 80% of the sample size
smp_size <- floor(0.8 * nrow(fatmen))
## set the seed to make the partition reproducible
set.seed(1)
train_ind <- sample(seq_len(nrow(fatmen)), size = smp_size)
men_train = fatmen[train_ind,]
men_test = fatmen[-train_ind,]
# Set up repeated k-fold cross validation
train.control <- trainControl(method = "repeatedcv", number = 5, repeats = 20)
# Train the model
step.model <- train(density~. - density, data = men_train,
tuneGrid = data.frame(nvmax = 1:6),
method = "leapSeq",
trControl = train.control
)
step.model$results
coef(step.model$finalModel, id=2)
coef(step.model$finalModel, id=3)
coef(step.model$finalModel)
coef(step.model$finalModel, id = 1)
coef(step.model$finalModel, id = 4)
train.control <- trainControl(method = "repeatedcv", number = 5, repeats = 20)
# Train the model
step.model <- train(density~. - density, data = men_train,
tuneGrid = data.frame(nvmax = 1:6),
method = "leapSeq",
trControl = train.control
)
? coef
step.model <- train(density~. - density, data = men_train,
tuneGrid = data.frame(nvmax = 1:13),
method = "leapSeq",
trControl = train.control
)
plot(step.model$results$RMSE, pch = 19, type = "b", ylab="RMSE")
summary(step.model)
train.control <- trainControl(method = "repeatedcv", number = 10, repeats = 20)
# Train the model
step.model <- train(density~. - density, data = men_train,
tuneGrid = data.frame(nvmax = 1:13),
method = "leapSeq",
trControl = train.control
)
summary(step.model)
# Set up repeated k-fold cross validation
train.control <- trainControl(method = "repeatedcv", number = 10, repeats = 20)
# Train the model
step.model <- train(density~. -density, data = men_train,
tuneGrid = data.frame(nvmax = 1:13),
method = "leapBackward",
trControl = train.control
)
summary(step.model)
plot(step.model$results$RMSE, pch = 19, type = "b", ylab="RMSE")
on
train.control <- trainControl(method = "repeatedcv", number = 10, repeats = 20)
# Train the model
step.model <- train(density~. -density, data = men_train,
tuneGrid = data.frame(nvmax = 1:13),
method = "leapForward",
trControl = train.control
)
# Set up repeated k-fold cross validation
train.control <- trainControl(method = "repeatedcv", number = 10, repeats = 20)
# Train the model
step.model <- train(density~. -density, data = men_train,
tuneGrid = data.frame(nvmax = 1:13),
method = "leapForward",
trControl = train.control
)
plot(step.model$results$RMSE, pch = 19, type = "b", ylab="RMSE")
# Train the model
step.model <- train(density~. -density, data = men_train,
tuneGrid = data.frame(nvmax = 1:13),
method = "leapSeq",
trControl = train.control
)
plot(step.model$results$RMSE, pch = 19, type = "b", ylab="RMSE")
summary(step.model)
summary(step.model)
# Set up repeated k-fold cross validation
train.control <- trainControl(method = "repeatedcv", number = 10, repeats = 20)
# Train the model
step.model <- train(density~. -density, data = men_train,
tuneGrid = data.frame(nvmax = 1:13),
method = "leapForward",
trControl = train.control
)
plot(step.model$results$RMSE, pch = 19, type = "b", ylab="RMSE")
